"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import datetime
from pathlib import Path
from dotenv import load_dotenv
from corsheaders.defaults import default_headers

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", 'foo')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = ['*']


# Application definition
SHARED_APPS = (

    'django_tenants',  # mandatory
    'restaurants',
    'django.contrib.contenttypes',
    'tenant_users.permissions',  # Defined in both shared apps and tenant apps
    'django.contrib.staticfiles',

    # everything below here is optional
    'django.contrib.auth',
    'django.contrib.sessions',
    # 'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.admin',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken',

    'django_cleanup.apps.CleanupConfig',  # Replace files with new. should be placed after your apps
    # AWS S3 Bucket
    'storages',
    'django_extensions',
    # Swagger
    'drf_yasg',

)

TENANT_APPS = (
    'django.contrib.admin',
    # The following Django contrib apps must be in TENANT_APPS
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'django.contrib.sessions',

    'django.contrib.auth',  # Defined in both shared apps and tenant apps
    'django.contrib.contenttypes',  # Defined in both shared apps and tenant apps
    'tenant_users.permissions',  # Defined in both shared apps and tenant apps

    'sort_order_field',
    'rest_framework',
    'corsheaders',

    # your tenant-specific apps
    'products',
    'restaurant_info',
    'django_extensions',
)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

TENANT_MODEL = "restaurants.Restaurant"  # app.Model

TENANT_DOMAIN_MODEL = "restaurants.Domain"  # app.Model

# TENANT_USERS_DOMAIN = os.environ.get('TENANT_USERS_DOMAIN', "localhost"),
TENANT_USERS_DOMAIN = os.environ.get('DOMAIN', 'localhost')

# Default Tenant schema to be cloned
TENANT_CREATION_FAKES_MIGRATIONS = True
TENANT_BASE_SCHEMA = 'tenant_base_schema_template'

AUTH_USER_MODEL = 'restaurants.TenantUser'
AUTHENTICATION_BACKENDS = (
    'tenant_users.permissions.backend.UserBackend',
)

MIDDLEWARE = [
    'django_tenants.middleware.main.TenantMainMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

PUBLIC_SCHEMA_URLCONF = 'urls_root'
ROOT_URLCONF = 'urls_subdomain'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# local
DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',
        'NAME': os.environ.get('SQL_DATABASE', 'chowtime_local_dev'),
        'USER': os.environ.get('SQL_USER', 'postgres'),
        'PASSWORD': os.environ.get('SQL_PASSWORD', 'postgres'),
        'HOST': os.environ.get('SQL_HOST', 'localhost'),
        'PORT': os.environ.get('SQL_PORT', '5432'),
    },
}

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

PG_EXTRA_SEARCH_PATHS = ['extensions']


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'settings.validators.DigitOrSymbolPasswordValidator'
    },
    {
        'NAME': 'settings.validators.UppercaseValidator'
    },
    {
        'NAME': 'settings.validators.LowercaseValidator'
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

# USE_TZ = True
USE_TZ = False


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',

    # other finders..
    # 'compressor.finders.CompressorFinder'
)

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    # os.path.join(os.path.dirname(BASE_DIR), 'frontend/static'),
)

STATIC_ROOT = os.path.join(BASE_DIR, os.path.pardir, 'app/staticfiles')
STATIC_URL = '/staticfiles/'


DEFAULT_RENDERER_CLASSES = (
    "settings.renderer.CustomJSONRenderer",
    "rest_framework.renderers.JSONRenderer",
)
if DEBUG:
    DEFAULT_RENDERER_CLASSES += ('rest_framework.renderers.BrowsableAPIRenderer', )

# SITE_ID = 1
REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    # Add custom exception handler
    'EXCEPTION_HANDLER': 'settings.renderer.custom_exception_handler',
}
CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True  # If this is used then `CORS_ORIGIN_WHITELIST` will not have any effect
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    "content-disposition ",
    "withCredentials",
]


# SESSION_COOKIE_DOMAIN = '.petriichuk.com'


JWT_COOKIE_NAME = "refresh"
JWT_COOKIE_SECURE = False
JWT_ALLOW_REFRESH = True
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=30),

    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True
    # 'SIGNING_KEY': SECRET_KEY,
}


USE_S3 = int(os.environ.get('USE_S3', 0))
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = 'app/mediafiles/'
AWS_LOCATION_STATIC = 'app/staticfiles/'
MEDIA_ROOT = os.path.join(BASE_DIR, os.path.pardir, 'app/mediafiles')
MEDIA_URL = 'https://%s/%s' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION) if USE_S3 else 'app/mediafiles/'
# Tenants Media
DEFAULT_FILE_STORAGE = 'settings.utils.TenantsS3Boto3Storage' if USE_S3 else "django_tenants.files.storage.TenantFileSystemStorage"
MEDIAFILES_STORAGE = 'settings.utils.TenantsS3Boto3Storage' if USE_S3 else 'django_tenants.files.storage.TenantFileSystemStorage'
if USE_S3:
    STATICFILES_STORAGE = 'settings.utils.CustomS3StaticStorage'
MULTITENANT_RELATIVE_MEDIA_ROOT = "%s/"
MEDIAFILES_DIRS = [
    os.path.join(BASE_DIR, 'app/mediafiles/'),
]

# Celery
CELERY_TIMEZONE = "UTC"
CELERY_ACCEPT_CONTENT = ['json', 'pickle']
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0')
# CELERYBEAT_SCHEDULE = {
#     'task': {
#         'task': 'task',
#         'schedule': crontab(minute=0, hour=0)
#
#     },
# }


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# My SMTP setup
MAILER_EMAIL_BACKEND = EMAIL_BACKEND
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS')
EMAIL_HOST_USER = os.environ.get('EMAIL_USERNAME')
EMAIL_PORT = os.environ.get('EMAIL_PORT', 587)
EMAIL_USE_SSL = int(os.environ.get('EMAIL_USE_SSL', 0))
EMAIL_USE_TLS = int(os.environ.get('EMAIL_USE_TLS', 1))
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

# Cookie
SESSION_COOKIE_HTTPONLY = True
