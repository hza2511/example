# Generated by Django 3.2.9 on 2022-01-20 14:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_tenants.postgresql_backend.base
import restaurants.models
import tenant_users.permissions.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TenantUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='Email Address')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('full_name', models.CharField(help_text='The full name of the user.', max_length=128)),
                ('phone_number', models.CharField(blank=True, help_text='The phone number of the user', max_length=20, null=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, tenant_users.permissions.models.PermissionsMixinFacade),
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_created=True, blank=True, help_text='When was the restaurant created', null=True)),
                ('schema_name', models.CharField(db_index=True, max_length=63, unique=True, validators=[django_tenants.postgresql_backend.base._check_schema_name])),
                ('slug', models.SlugField(blank=True, verbose_name='Tenant URL Name')),
                ('image', models.ImageField(blank=True, help_text='The image of the restaurant', null=True, upload_to=restaurants.models.restaurant_image_dir_path)),
                ('name', models.CharField(help_text='The name of the restaurant', max_length=64)),
                ('description', models.TextField(blank=True, help_text='The description of the restaurant', max_length=512, null=True)),
                ('email', models.EmailField(blank=True, help_text='The email of the restaurant', max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, help_text='The phone number of the restaurant', max_length=20, null=True)),
                ('website', models.CharField(blank=True, help_text='The website of the restaurant', max_length=2048, null=True)),
                ('street', models.CharField(blank=True, help_text='The street address of the restaurant', max_length=128, null=True)),
                ('building', models.CharField(blank=True, help_text='The name of the building or the number', max_length=32, null=True)),
                ('city', models.CharField(blank=True, help_text='The city of the restaurant', max_length=85, null=True)),
                ('postal_code', models.CharField(blank=True, help_text='The postal code of the restaurant', max_length=16, null=True)),
                ('country', models.CharField(blank=True, help_text='The country of the restaurant', max_length=56, null=True)),
                ('ordering_instructions', models.CharField(default='Place your order quick and easy and we will deliver to your table.', help_text="We'll show this message to your customers when they first visit your ordering site", max_length=512)),
                ('no_available_menus', models.CharField(default='We are temporarily not displaying mobile menus, please use your physical menu or contact our wait staff to order! ðŸ˜„', help_text="We'll show this message to your customers if you have no available menu.", max_length=512)),
                ('allow_mobile_ordering', models.BooleanField(default=False, help_text='Are you accepting mobile orders (made with your digital menu)?')),
                ('allow_live_payments', models.BooleanField(default=False, help_text='Are you accepting live payments (paid with your digital menu)?')),
                ('modified', models.DateTimeField(auto_now=True, help_text='When was the restaurant modified last time', null=True)),
                ('is_created', models.BooleanField(default=False, help_text='If the restaurant creation process has finished')),
                ('owner', models.ForeignKey(blank=True, help_text='The owner of the restaurant', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=253, unique=True)),
                ('is_primary', models.BooleanField(db_index=True, default=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='restaurants.restaurant')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tenantuser',
            name='tenants',
            field=models.ManyToManyField(blank=True, help_text='The tenants this user belongs to.', related_name='user_set', to='restaurants.Restaurant', verbose_name='tenants'),
        ),
    ]
